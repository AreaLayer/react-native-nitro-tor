///
/// HiddenServiceParams.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <optional>
#include <vector>

namespace margelo::nitro::nitrotor {

  /**
   * A struct which can be represented as a JavaScript object (HiddenServiceParams).
   */
  struct HiddenServiceParams {
  public:
    double port     SWIFT_PRIVATE;
    double target_port     SWIFT_PRIVATE;
    std::optional<std::vector<double>> key_data     SWIFT_PRIVATE;

  public:
    explicit HiddenServiceParams(double port, double target_port, std::optional<std::vector<double>> key_data): port(port), target_port(target_port), key_data(key_data) {}
  };

} // namespace margelo::nitro::nitrotor

namespace margelo::nitro {

  using namespace margelo::nitro::nitrotor;

  // C++ HiddenServiceParams <> JS HiddenServiceParams (object)
  template <>
  struct JSIConverter<HiddenServiceParams> final {
    static inline HiddenServiceParams fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return HiddenServiceParams(
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "port")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "target_port")),
        JSIConverter<std::optional<std::vector<double>>>::fromJSI(runtime, obj.getProperty(runtime, "key_data"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const HiddenServiceParams& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "port", JSIConverter<double>::toJSI(runtime, arg.port));
      obj.setProperty(runtime, "target_port", JSIConverter<double>::toJSI(runtime, arg.target_port));
      obj.setProperty(runtime, "key_data", JSIConverter<std::optional<std::vector<double>>>::toJSI(runtime, arg.key_data));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "port"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "target_port"))) return false;
      if (!JSIConverter<std::optional<std::vector<double>>>::canConvert(runtime, obj.getProperty(runtime, "key_data"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro

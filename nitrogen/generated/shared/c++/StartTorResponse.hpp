///
/// StartTorResponse.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <string>

namespace margelo::nitro::nitrotor {

  /**
   * A struct which can be represented as a JavaScript object (StartTorResponse).
   */
  struct StartTorResponse {
  public:
    bool is_success     SWIFT_PRIVATE;
    std::string onion_address     SWIFT_PRIVATE;
    std::string control     SWIFT_PRIVATE;
    std::string error_message     SWIFT_PRIVATE;

  public:
    StartTorResponse() = default;
    explicit StartTorResponse(bool is_success, std::string onion_address, std::string control, std::string error_message): is_success(is_success), onion_address(onion_address), control(control), error_message(error_message) {}
  };

} // namespace margelo::nitro::nitrotor

namespace margelo::nitro {

  using namespace margelo::nitro::nitrotor;

  // C++ StartTorResponse <> JS StartTorResponse (object)
  template <>
  struct JSIConverter<StartTorResponse> final {
    static inline StartTorResponse fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return StartTorResponse(
        JSIConverter<bool>::fromJSI(runtime, obj.getProperty(runtime, "is_success")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "onion_address")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "control")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "error_message"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const StartTorResponse& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "is_success", JSIConverter<bool>::toJSI(runtime, arg.is_success));
      obj.setProperty(runtime, "onion_address", JSIConverter<std::string>::toJSI(runtime, arg.onion_address));
      obj.setProperty(runtime, "control", JSIConverter<std::string>::toJSI(runtime, arg.control));
      obj.setProperty(runtime, "error_message", JSIConverter<std::string>::toJSI(runtime, arg.error_message));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<bool>::canConvert(runtime, obj.getProperty(runtime, "is_success"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "onion_address"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "control"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "error_message"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
